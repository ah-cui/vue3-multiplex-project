/*********************************************************************************
*
*           by zerostyle on 20210602 
*           
*           @babel 配置项
*


*********20210603**********以下是 @babel/preset-env 预设与 Babel Plugins List 之间的包含关系**********************************     
      
      编译插件（Transform Plugins）如下：

          支持ES3的包如下：
          @babel/plugin-transform-member-expression-literals      https://babel.docschina.org/docs/en/babel-plugin-transform-member-expression-literals
          @babel/plugin-transform-property-literals               https://babel.docschina.org/docs/en/babel-plugin-transform-property-literals
          @babel/plugin-transform-reserved-words                  https://babel.docschina.org/docs/en/babel-plugin-transform-reserved-words

          支持ES5的包如下：
                (不含)@babel/plugin-transform-property-mutators   https://babel.docschina.org/docs/en/babel-plugin-transform-property-mutators

          支持ES2015的包如下：
          @babel/plugin-transform-arrow-functions                 https://babel.docschina.org/docs/en/babel-plugin-transform-arrow-functions
          @babel/plugin-transform-block-scoped-functions          https://babel.docschina.org/docs/en/babel-plugin-transform-block-scoped-functions
          @babel/plugin-transform-block-scoping                   https://babel.docschina.org/docs/en/babel-plugin-transform-block-scoping
          @babel/plugin-transform-classes                         https://babel.docschina.org/docs/en/babel-plugin-transform-classes
          @babel/plugin-transform-computed-properties             https://babel.docschina.org/docs/en/babel-plugin-transform-computed-properties
          @babel/plugin-transform-destructuring                   https://babel.docschina.org/docs/en/babel-plugin-transform-destructuring
          @babel/plugin-transform-duplicate-keys                  https://babel.docschina.org/docs/en/babel-plugin-transform-duplicate-keys
          @babel/plugin-transform-for-of                          https://babel.docschina.org/docs/en/babel-plugin-transform-for-of
          @babel/plugin-transform-function-name                   https://babel.docschina.org/docs/en/babel-plugin-transform-function-name
                （不含）@babel/plugin-transform-instanceof         https://babel.docschina.org/docs/en/babel-plugin-transform-instanceof
          @babel/plugin-transform-literals                        https://babel.docschina.org/docs/en/babel-plugin-transform-literals
          @babel/plugin-transform-new-target                      https://babel.docschina.org/docs/en/babel-plugin-transform-new-target
          @babel/plugin-transform-object-super                    https://babel.docschina.org/docs/en/babel-plugin-transform-object-super
          @babel/plugin-transform-parameters                      https://babel.docschina.org/docs/en/babel-plugin-transform-parameters
          @babel/plugin-transform-shorthand-properties            https://babel.docschina.org/docs/en/babel-plugin-transform-shorthand-properties
          @babel/plugin-transform-spread                          https://babel.docschina.org/docs/en/babel-plugin-transform-spread
          @babel/plugin-transform-sticky-regex                    https://babel.docschina.org/docs/en/babel-plugin-transform-sticky-regex
          @babel/plugin-transform-template-literals               https://babel.docschina.org/docs/en/babel-plugin-transform-template-literals
          @babel/plugin-transform-typeof-symbol                   https://babel.docschina.org/docs/en/babel-plugin-transform-typeof-symbol
          @babel/plugin-transform-unicode-escapes                 https://babel.docschina.org/docs/en/babel-plugin-transform-unicode-escapes
          @babel/plugin-transform-unicode-regex                   https://babel.docschina.org/docs/en/babel-plugin-transform-unicode-regex

          支持ES2016的包如下：
          @babel/plugin-transform-exponentiation-operator         https://babel.docschina.org/docs/en/babel-plugin-transform-exponentiation-operator

          支持ES2017的包如下：
          @babel/plugin-transform-async-to-generator              https://babel.docschina.org/docs/en/babel-plugin-transform-async-to-generator


          支持ES2018的包如下：
          @babel/plugin-proposal-async-generator-functions
          @babel/plugin-transform-dotall-regex
          @babel/plugin-transform-named-capturing-groups-regex
          @babel/plugin-proposal-object-rest-spread
          @babel/plugin-proposal-unicode-property-regex

          支持ES2019的包如下：
          @babel/plugin-proposal-optional-catch-binding
          @babel/plugin-proposal-json-strings


          Syntax Only：
                （不含）@babel/plugin-syntax-bigint
          @babel/plugin-syntax-dynamic-import
                （不含）@babel/plugin-syntax-import-meta
          
          

          支持ES2020的包如下：
          @babel/plugin-proposal-export-namespace-from
          @babel/plugin-proposal-nullish-coalescing-operator
          @babel/plugin-proposal-optional-chaining


          支持ES2021的包如下：
          @babel/plugin-proposal-numeric-separator
          @babel/plugin-proposal-logical-assignment-operators



          


          模块化编译组件
          @babel/plugin-transform-modules-amd
          @babel/plugin-transform-modules-commonjs
          @babel/plugin-transform-modules-systemjs
          @babel/plugin-transform-modules-umd


          TC39 Proposals
          @babel/plugin-proposal-class-properties
          @babel/plugin-proposal-class-static-block
                （不含）@babel/plugin-proposal-decorators
                （不含）@babel/plugin-proposal-do-expressions
                （不含）@babel/plugin-proposal-export-default-from
          @babel/plugin-proposal-export-namespace-from
                （不含）@babel/plugin-proposal-function-bind
                （不含）@babel/plugin-proposal-function-sent
                （不含）@babel/plugin-proposal-partial-application
                （不含）@babel/plugin-proposal-pipeline-operator
          @babel/plugin-proposal-private-methods
                （不含）@babel/plugin-proposal-throw-expressions
          @babel/plugin-proposal-private-property-in-object
                (不含)@babel/plugin-proposal-record-and-tuple


                
                
          
*************20210603**********以下是 @babel/preset-env 预设包含的其他插件*******************************************************************************                
          



          其他插件（组件）
          @babel/plugin-transform-regenerator





      语法插件（Syntax Plugins）
          @babel/plugin-syntax-async-generators
          @babel/plugin-syntax-class-properties
          @babel/plugin-syntax-class-static-block
          @babel/plugin-syntax-dynamic-import
          @babel/plugin-syntax-export-namespace-from
          @babel/plugin-syntax-json-strings
          @babel/plugin-syntax-logical-assignment-operators
          @babel/plugin-syntax-nullish-coalescing-operator
          @babel/plugin-syntax-numeric-separator
          @babel/plugin-syntax-object-rest-spread
          @babel/plugin-syntax-optional-catch-binding
          @babel/plugin-syntax-optional-chaining
          @babel/plugin-syntax-private-property-in-object
          @babel/plugin-syntax-top-level-await








      其他依赖项：
          @babel/compat-data
          @babel/helper-compilation-targets
          @babel/helper-plugin-utils
          @babel/helper-validator-option
          @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining
          
          @babel/plugin-proposal-dynamic-import
          
          @babel/plugin-transform-regenerator
          @babel/preset-modules
          @babel/types
          babel-plugin-polyfill-corejs2
          babel-plugin-polyfill-corejs3
          babel-plugin-polyfill-regenerator
          core-js-compat
          semver


      
*
*
*
*
*
*********************************************************************************/




{
  "presets": [
    ["@babel/preset-env",
      {
        /**
        * "usage" | "entry" | false, defaults to false.
        * This option configures how @babel/preset-env handles polyfills.
        * When either the usage or entry options are used, @babel-preset-env will add direct references to core-js modules as bare imports (or requires). This means core-js will be resolved relative to the file itself and needs to be accessible.

                      useBuiltIns 共有三个值：
                              false: 不对 polyfill 做操作
                              entry: 根据配置的浏览器兼容版本，引入浏览器不兼容的 polyfill
                              usage: 根据配置的浏览器兼容版本，以及代码中使用到的语法来 决定引入那些 polyfill
        */
        "useBuiltIns":"entry",
        
        /**
        * "amd" | "umd" | "systemjs" | "commonjs" | "cjs" | "auto" | false, defaults to "auto".
        * Enable transformation of ES6 module syntax to another module type.
        * Setting this to false will not transform modules.
        * Also note that cjs is just an alias for commonjs.
        */
        "modules":"auto",
        /**
        * 2, 3 or { version: 2 | 3, proposals: boolean }, defaults to 2.
        * This option only has an effect when used alongside useBuiltIns: usage or useBuiltIns: entry, and ensures @babel/preset-env injects the correct imports for your core-js version.
        */
        "corejs": {
              "version":"3.14",
              "proposals":true
            },

        /**
        * boolean, defaults to false.
        * By default, this preset will run all the transforms needed for the targeted environment(s). Enable this option if you want to force running all transforms, which is useful if the output will be run through UglifyJS or an environment that only supports ES5.
        */
        "forceAllTransforms":false,

        /**
        * string, defaults to process.cwd()
        * The starting point where the config search for browserslist will start, and ascend to the system root until found.
        */
        "configPath":"process.cwd()",

        /**
        * boolean, defaults to false
        * Toggles whether or not browserslist config sources are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json. This is useful for projects that use a browserslist config for files that won't be compiled with Babel.
        */
        "ignoreBrowserslistConfig":true,

        /**
        * string, defaults to undefined
        * The Browserslist environment to use.
        */
        "browserslistEnv": "undefined",

        /**
        * boolean, defaults to false
        * Toggles enabling support for builtin/feature proposals that have shipped in browsers. If your target environments have native support for a feature proposal, its matching parser syntax plugin is enabled instead of performing any transform. Note that this does not enable the same transformations as @babel/preset-stage-3, since proposals can continue to change before landing in browsers.
        */
        "shippedProposals":true,


        /**
        *boolean, defaults to false.
        *Outputs the targets/plugins used and the version specified in plugin data version to console.log.
        */
        "debug":false,
        
        /**
        * Array<string|RegExp>, defaults to [].
        * An array of plugins to always include.
        */
        "include":[],

        /**
        * Array<string|RegExp>, defaults to [].
        * An array of plugins to always exclude/remove.
        * The possible options are the same as the include option.
        */
        "exclude":[],
        /**
        * boolean, defaults to false.
        * Note: These optimizations will be enabled by default in Babel 8
        * By default, @babel/preset-env (and Babel plugins in general) grouped ECMAScript syntax features into collections of closely related smaller features. These groups can be large and include a lot of edge cases, for example "function arguments" includes destructured, default and rest parameters. From this grouping information, Babel enables or disables each group based on the browser support target you specify to @babel/preset-env’s targets option.
        * When this option is enabled, @babel/preset-env tries to compile the broken syntax to the closest non-broken modern syntax supported by your target browsers. Depending on your targets and on how many modern syntax you are using, this can lead to a significant size reduction in the compiled app. This option merges the features of @babel/preset-modules without having to use another preset.
        */
        "bugfixes": false,

        /**
        * boolean, defaults to false.
        * Enable more spec compliant, but potentially slower, transformations for any plugins in this preset that support them.
        */
        "spec":false,

        /**
        * boolean, defaults to false.
        * Enable "loose" transformations for any plugins in this preset that allow them.
        */
        "loose":false,
      
        /**
        * string | Array<string> | { [string]: string }, defaults to {}.
        * Describes the environments you support/target for your project.
        * This can either be a browserslist-compatible query (with caveats):
        * Example environments: chrome, opera, edge, firefox, safari, ie, ios, android, node, electron.
        * Sidenote, if no targets are specified, @babel/preset-env will transform all ECMAScript 2015+ code by default.
        * We don't recommend using preset-env this way because it doesn't take advantage of its ability to target specific browsers.
        */
        "targets": {
            /*
            * string | Array<string>.
            * A query to select browsers (ex: last 2 versions, > 5%, safari tp) using browserslist.
            * Note, browsers' results are overridden by explicit items from targets.
            * cli: npx browserslist "last 1 version, >1%"
            * search website:https://caniuse.com/
            */
            "browsers":["> 1%", "last 2 versions", "not ie <= 8"],
            /*
            * boolean.
            * You may also target browsers supporting ES Modules (https://www.ecma-international.org/ecma-262/6.0/#sec-modules). When specifying this option, the browsers field will be ignored. You can use this approach in combination with <script type="module"></script> to conditionally serve smaller scripts to users (https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility).
            * Please note: when specifying the esmodules target, browsers targets will be ignored.
            */
            "esmodules":false,
            /*
            * string | "current" | true.
            * If you want to compile against the current node version, you can specify "node": true or "node": "current", which would be the same as "node": process.versions.node.
            */
            "node":true,
            //"chrome": "58",
            "ie": "9",
            /*
            * string | "tp".
            * If you want to compile against the technology preview version of Safari, you can specify "safari": "tp".
            */
            //"safari":"tp"

        }
      }
    ],
  ],
  "plugins": 
  [
    [
        
      "@babel/transform-runtime",
      {

          /**
          * false, 2, 3 or { version: 2 | 3, proposals: boolean }, defaults to false.
          * e.g. ['@babel/plugin-transform-runtime', { corejs: 3 }],
          * Specifying a number will rewrite the helpers that need polyfillable APIs to reference helpers from that (major) version of core-js instead Please note that corejs: 2 only supports global variables (e.g. Promise) and static properties (e.g. Array.from), while corejs: 3 also supports instance properties (e.g. [].includes).
          * By default, @babel/plugin-transform-runtime doesn't polyfill proposals. If you are using corejs: 3, you can opt into this by enabling using the proposals: true option.
          */
          "corejs": {
            "version": 3,
            "proposals": true
          },
          
          
          /**
          * boolean, defaults to true.
          * Toggles whether or not inlined Babel helpers (classCallCheck, extends, etc.) are replaced with calls to moduleName.
          */
          "helpers": true,

          /**
          * regenerator
          * boolean, defaults to true.
          * Toggles whether or not generator functions are transformed to use a regenerator runtime that does not pollute the global scope.
          * For more information, see Regenerator aliasing.
          */
          "regenerator": true,

          /**
          * boolean, defaults to false.
          * When enabled, the transform will use helpers that do not get run through @babel/plugin-transform-modules-commonjs. This allows for smaller builds in module systems like webpack, since it doesn't need to preserve commonjs semantics.
          */
          "useESModules": false,

          /**
          * boolean or string, defaults to false.
          * This allows users to run transform-runtime broadly across a whole project. By default, transform-runtime imports from @babel/runtime/foo directly, but that only works if @babel/runtime is in the node_modules of the file that is being compiled. This can be problematic for nested node_modules, npm-linked modules, or CLIs that reside outside the user's project, among other cases. To avoid worrying about how the runtime module's location is resolved, this allows users to resolve the runtime once up front, and then insert absolute paths to the runtime into the output code.
          * Using absolute paths is not desirable if files are compiled for use at a later time, but in contexts where a file is compiled and then immediately consumed, they can be quite helpful.
          */
          "absoluteRuntime":false,
          

          "proposals": true,
          /**
          * By default transform-runtime assumes that @babel/runtime@7.0.0 is installed. If you have later versions of @babel/runtime (or their corejs counterparts e.g. @babel/runtime-corejs3) installed or listed as a dependency, transform-runtime can use more advanced features.
          */
          "version": "^7.14.0"
      },
    ],
    [
      "@babel/plugin-proposal-decorators",
      { 
        "legacy": true 
      }
    ],
    "@babel/plugin-transform-arrow-functions",
    "@babel/plugin-syntax-dynamic-import",
    "@babel/plugin-transform-modules-umd"
  ],
  "env": {
    "test": {
      "presets": ["@babel/preset-env"]
    }
  }
}



// {
//       // 设置 babel 通过那些规定做兼容性处理
//       "presets": [
//           [
//               "@babel/preset-env",
//               {
//                   // useBuiltIns 共有三个值：
//                   // false: 不对 polyfill 做操作
//                   // entry: 根据配置的浏览器兼容版本，引入浏览器不兼容的 polyfill
//                   // usage: 根据配置的浏览器兼容版本，以及代码中使用到的语法来 决定引入那些 polyfill
//                   "useBuiltIns": "usage",
//                   // 指定使用那个版本的 corejs 进行转换
//                   "corejs": {
//                       "version": 3.6
//                   },
//                   // 配置浏览器需要兼容的版本 key 为浏览器名称， value 为浏览器的版本号
//                   "targets": {
//                       // 截至到现在 chrome 现在已经更新到 86 版本了
//                       "chrome": "70",
//                       "ie": "9"
//                   }
//               }
//           ]
//       ],
//   }

// {
//       "presets": 
//       [
//             "@babel/preset-env"
//       ],
//       "plugins": 
//       [
//             // 处理ES6新功能非垫片实现
//             ["@babel/plugin-transform-runtime",{"corejs": 3 }]
//       ]
// }